import torch
import torchvision.transforms as T
from torchvision.models import resnet18
from torch.nn import functional as F
from PIL import Image
import requests
from io import BytesIO
import numpy as np
import matplotlib.pyplot as plt

# Preprocessing
transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor()
])

# Load image from URL
def load_image(url):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content)).convert("RGB")
    return img

# Grad-CAM hooks
feature_maps, gradients = None, None
def forward_hook(module, input, output):
    global feature_maps
    feature_maps = output

def backward_hook(module, grad_in, grad_out):
    global gradients
    gradients = grad_out[0]

# Fisher-CAM (Grad-CAM squared)
def generate_fisher_cam(model, input_tensor):
    model.zero_grad()
    output = model(input_tensor)
    class_idx = output.argmax(dim=1).item()
    output[0, class_idx].backward()

    weights = gradients.mean(dim=[2, 3], keepdim=True)
    cam = (weights * feature_maps).sum(dim=1, keepdim=True)
    cam = F.relu(cam)
    cam = F.interpolate(cam, size=(224, 224), mode='bilinear', align_corners=False)
    cam = cam.squeeze().detach().numpy()
    cam = (cam - cam.min()) / (cam.max() - cam.min() + 1e-8)
    
    # Fisher-CAM: Square of normalized Grad-CAM
    fisher_cam = cam ** 2
    fisher_cam = (fisher_cam - fisher_cam.min()) / (fisher_cam.max() - fisher_cam.min() + 1e-8)
    return fisher_cam

def apply_transform(img):
    return T.functional.rotate(img, angle=10)

def pixelwise_discrepancy(cam1, cam2):
    return np.linalg.norm(cam1 - cam2)

# Main
url = "https://www.nps.gov/lacl/learn/nature/images/Image-w-cred-cap_-1200w-_-Brown-Bear-page_-brown-bear-in-fog_2.jpg"
img = load_image(url)

model = resnet18(weights='IMAGENET1K_V1').eval()
model.layer4[1].conv2.register_forward_hook(forward_hook)
model.layer4[1].conv2.register_full_backward_hook(backward_hook)

input_tensor = transform(img).unsqueeze(0)
transformed_img = apply_transform(img)
trans_tensor = transform(transformed_img).unsqueeze(0)

# Fisher-CAM generation
cam_orig = generate_fisher_cam(model, input_tensor)
cam_trans = generate_fisher_cam(model, trans_tensor)

# Discrepancy Score
score = pixelwise_discrepancy(cam_orig, cam_trans)

# Visualization
fig, axes = plt.subplots(2, 3, figsize=(16, 10))
axes[0, 0].imshow(img)
axes[0, 0].set_title("Original Image")
axes[0, 0].axis("off")

axes[0, 1].imshow(transformed_img)
axes[0, 1].set_title("Transformed Image")
axes[0, 1].axis("off")

axes[0, 2].axis("off")

axes[1, 0].imshow(cam_orig, cmap='jet')
axes[1, 0].set_title("Fisher-CAM (Original)")
axes[1, 0].axis("off")

axes[1, 1].imshow(cam_trans, cmap='jet')
axes[1, 1].set_title("Fisher-CAM (Transformed)")
axes[1, 1].axis("off")

diff = np.abs(cam_orig - cam_trans)
axes[1, 2].imshow(diff, cmap='hot')
axes[1, 2].set_title(f"Pixel-wise Diff (L2 = {score:.4f})")
axes[1, 2].axis("off")

plt.tight_layout()
plt.show()
