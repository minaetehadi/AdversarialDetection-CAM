import torch
import torchvision.transforms as T
import torchvision.models as models
from torchvision.models import ResNet18_Weights, VGG19_Weights
import torch.nn.functional as F
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt

# -------------------------------
# Config
# -------------------------------
USE_VGG = False         # True for VGG-19, False for ResNet-18
EPSILON = 0.03          # Maximum perturbation
ALPHA = 0.005           # Step size
STEPS = 10              # Number of iterations

# -------------------------------
# Load image from URL
# -------------------------------
def load_image(url):
    response = requests.get(url)
    image = Image.open(BytesIO(response.content)).convert('RGB')
    return image

# Preprocessing and deprocessing
transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
])

normalize = T.Normalize(mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225])

inv_normalize = T.Normalize(
    mean=[-0.485 / 0.229, -0.456 / 0.224, -0.406 / 0.225],
    std=[1 / 0.229, 1 / 0.224, 1 / 0.225]
)

# -------------------------------
# Load pretrained model
# -------------------------------
if USE_VGG:
    model = models.vgg19(weights=VGG19_Weights.IMAGENET1K_V1).eval()
else:
    model = models.resnet18(weights=ResNet18_Weights.IMAGENET1K_V1).eval()

# -------------------------------
# PGD Attack Implementation
# -------------------------------
def pgd_attack(model, image, label, epsilon, alpha, steps):
    ori_image = image.clone().detach()
    image = image.clone().detach().requires_grad_(True)

    for step in range(steps):
        output = model(image)
        loss = F.nll_loss(F.log_softmax(output, dim=1), label)
        model.zero_grad()
        loss.backward()
        grad_sign = image.grad.data.sign()
        image = image + alpha * grad_sign
        perturbation = torch.clamp(image - ori_image, min=-epsilon, max=epsilon)
        image = torch.clamp(ori_image + perturbation, 0, 1).detach().requires_grad_(True)

    return image

# -------------------------------
# Run PGD
# -------------------------------
url = "https://www.nps.gov/lacl/learn/nature/images/Image-w-cred-cap_-1200w-_-Brown-Bear-page_-brown-bear-in-fog_2.jpg"
img = load_image(url)
input_tensor = transform(img).unsqueeze(0)
input_tensor = normalize(input_tensor)

# Original prediction
with torch.no_grad():
    output = model(input_tensor)
label = output.argmax(dim=1)

# PGD attack
adv_tensor = pgd_attack(model, input_tensor, label, EPSILON, ALPHA, STEPS)

# Undo normalization for visualization
original_img = inv_normalize(input_tensor.squeeze()).clamp(0, 1).permute(1, 2, 0).numpy()
adv_img = inv_normalize(adv_tensor.squeeze()).clamp(0, 1).permute(1, 2, 0).detach().numpy()

# -------------------------------
# Visualization
# -------------------------------
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.imshow(original_img)
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(adv_img)
plt.title(f"PGD Adversarial Image (ε={EPSILON}, α={ALPHA})")
plt.axis("off")

plt.tight_layout()
plt.show()
