import torch
import torchvision.transforms as T
import torchvision.models as models
from PIL import Image
import matplotlib.pyplot as plt
import requests
from io import BytesIO
from torchattacks import DeepFool

# Load image
url = "https://www.nps.gov/lacl/learn/nature/images/Image-w-cred-cap_-1200w-_-Brown-Bear-page_-brown-bear-in-fog_2.jpg"
img = Image.open(BytesIO(requests.get(url).content)).convert("RGB")

# Preprocess
transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
])
tensor_img = transform(img).unsqueeze(0)

# Normalize for ResNet
normalize = T.Normalize(mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225])
inv_normalize = T.Normalize(mean=[-m/s for m, s in zip([0.485, 0.456, 0.406],
                                                       [0.229, 0.224, 0.225])],
                            std=[1/s for s in [0.229, 0.224, 0.225]])

img_norm = normalize(tensor_img)

# Load pretrained ResNet-18
model = models.resnet18(weights=models.ResNet18_Weights.IMAGENET1K_V1).eval()

# Predict original
with torch.no_grad():
    pred_orig = model(img_norm).argmax(1).item()

# Apply DeepFool
attack = DeepFool(model)
img_adv = attack(tensor_img, torch.tensor([pred_orig]))

# Predict adversarial
with torch.no_grad():
    pred_adv = model(normalize(img_adv)).argmax(1).item()

# Compare
success = pred_orig != pred_adv

# Show results
fig, axs = plt.subplots(1, 2, figsize=(10, 4))
axs[0].imshow(inv_normalize(tensor_img[0]).permute(1, 2, 0).clamp(0, 1))
axs[0].set_title(f"Original (Label {pred_orig})")
axs[0].axis("off")

axs[1].imshow(inv_normalize(img_adv[0]).permute(1, 2, 0).clamp(0, 1))
axs[1].set_title(f"Adversarial (Label {pred_adv})")
axs[1].axis("off")

plt.suptitle("DeepFool Attack Result: " + ("Successful" if success else "Failed"), fontsize=14)
plt.tight_layout()
plt.show()
