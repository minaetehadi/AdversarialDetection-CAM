import torch
import torchvision.transforms as T
import torchvision.models as models
from torchvision.models import ResNet18_Weights, VGG19_Weights
import torch.nn.functional as F
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt

# Parameters
EPSILON = 0.03  # FGSM perturbation strength
USE_VGG = False  # Set True for VGG-19, False for ResNet-18

# Load image from URL
def load_image_from_url(url):
    response = requests.get(url)
    image = Image.open(BytesIO(response.content)).convert('RGB')
    return image

# Preprocessing and deprocessing
transform = T.Compose([
    T.Resize((224, 224)),
    T.ToTensor(),
])

inv_normalize = T.Normalize(
    mean=[-0.485/0.229, -0.456/0.224, -0.406/0.225],
    std=[1/0.229, 1/0.224, 1/0.225]
)

normalize = T.Normalize(mean=[0.485, 0.456, 0.406],
                        std=[0.229, 0.224, 0.225])

# Load model
if USE_VGG:
    model = models.vgg19(weights=VGG19_Weights.IMAGENET1K_V1).eval()
else:
    model = models.resnet18(weights=ResNet18_Weights.IMAGENET1K_V1).eval()

# FGSM Attack function
def fgsm_attack(model, image, label, epsilon):
    image.requires_grad = True
    output = model(image)
    loss = F.nll_loss(F.log_softmax(output, dim=1), label)
    loss.backward()
    perturbed_image = image + epsilon * image.grad.sign()
    return torch.clamp(perturbed_image, 0, 1)

# Main procedure
url = "https://www.nps.gov/lacl/learn/nature/images/Image-w-cred-cap_-1200w-_-Brown-Bear-page_-brown-bear-in-fog_2.jpg"
img = load_image_from_url(url)
input_tensor = transform(img).unsqueeze(0)
input_tensor = normalize(input_tensor)

# Predict original
with torch.no_grad():
    original_output = model(input_tensor)
label = original_output.argmax(dim=1)

# Apply FGSM
adv_tensor = fgsm_attack(model, input_tensor.clone(), label, EPSILON)

# Undo normalization for display
input_img_disp = inv_normalize(input_tensor.squeeze()).clamp(0, 1).permute(1, 2, 0).numpy()
adv_img_disp = inv_normalize(adv_tensor.squeeze()).clamp(0, 1).permute(1, 2, 0).detach().numpy()

# Show results
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.imshow(input_img_disp)
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(adv_img_disp)
plt.title(f"FGSM Perturbed Image (Îµ={EPSILON})")
plt.axis("off")

plt.tight_layout()
plt.show()
